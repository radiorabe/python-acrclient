{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python ACR Client module Contains a simple client for calling the v2 endpoints of the ACRCloud API. Installation poetry add acrclient # or on old setup style projects pip -m install acrclient Usage >>> from acrclient import Client >>> client = Client ( bearer_token = \"bearer-token\" ) Development # setup a dev env python -mvenv env . env/bin/activate # install a modern poetry version python -mpip install poetry> = 1 .2.0 # install deps and dev version poetry install # make changes, run tests poetry run pytest Release Management The CI/CD setup uses semantic commit messages following the conventional commits standard . There is a GitHub Action in .github/workflows/semantic-release.yaml that uses go-semantic-commit to create new releases. The commit message should be structured as follows: <type>[optional scope]: <description> [optional body] [optional footer(s)] The commit contains the following structural elements, to communicate intent to the consumers of your library: fix: a commit of the type fix patches gets released with a PATCH version bump feat: a commit of the type feat gets released as a MINOR version bump BREAKING CHANGE: a commit that has a footer BREAKING CHANGE: gets released as a MAJOR version bump types other than fix: and feat: are allowed and don't trigger a release If a commit does not contain a conventional commit style message you can fix it during the squash and merge operation on the PR. Once a commit has landed on the main branch a release will be created and automatically published to pypi using the GitHub Action in .github/workflows/release.yaml which uses poetry to publish the package to pypi. License This package is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, version 3 of the License. Copyright Copyright (c) 2023 Radio Bern RaBe","title":"README"},{"location":"#python-acr-client-module","text":"Contains a simple client for calling the v2 endpoints of the ACRCloud API.","title":"Python ACR Client module"},{"location":"#installation","text":"poetry add acrclient # or on old setup style projects pip -m install acrclient","title":"Installation"},{"location":"#usage","text":">>> from acrclient import Client >>> client = Client ( bearer_token = \"bearer-token\" )","title":"Usage"},{"location":"#development","text":"# setup a dev env python -mvenv env . env/bin/activate # install a modern poetry version python -mpip install poetry> = 1 .2.0 # install deps and dev version poetry install # make changes, run tests poetry run pytest","title":"Development"},{"location":"#release-management","text":"The CI/CD setup uses semantic commit messages following the conventional commits standard . There is a GitHub Action in .github/workflows/semantic-release.yaml that uses go-semantic-commit to create new releases. The commit message should be structured as follows: <type>[optional scope]: <description> [optional body] [optional footer(s)] The commit contains the following structural elements, to communicate intent to the consumers of your library: fix: a commit of the type fix patches gets released with a PATCH version bump feat: a commit of the type feat gets released as a MINOR version bump BREAKING CHANGE: a commit that has a footer BREAKING CHANGE: gets released as a MAJOR version bump types other than fix: and feat: are allowed and don't trigger a release If a commit does not contain a conventional commit style message you can fix it during the squash and merge operation on the PR. Once a commit has landed on the main branch a release will be created and automatically published to pypi using the GitHub Action in .github/workflows/release.yaml which uses poetry to publish the package to pypi.","title":"Release Management"},{"location":"#license","text":"This package is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, version 3 of the License.","title":"License"},{"location":"#copyright","text":"Copyright (c) 2023 Radio Bern RaBe","title":"Copyright"},{"location":"reference/SUMMARY/","text":"acrclient client models","title":"SUMMARY"},{"location":"reference/acrclient/","text":"Get started by importing the Client >>> from acrclient import Client Create an instance and pass it a bearer token: >>> client = Client ( \"bearer-token\" ) See Client for available methods and options.","title":"acrclient"},{"location":"reference/acrclient/client/","text":"Client Client class with various methods to call ACRCloud API v2 endpoints. Examples: Create an instance with configuration. >>> bearer_token = \"bearer-token\" >>> config = Client . Config ( retries = 5 , backoff_factor = 0.1 ) >>> client = Client ( bearer_token , config = config ) Source code in acrclient/client.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 class Client : \"\"\"Client class with various methods to call ACRCloud API v2 endpoints. Examples: Create an instance with configuration. ```python >>> bearer_token = \"bearer-token\" >>> config = Client.Config(retries= 5, backoff_factor= 0.1) >>> client = Client(bearer_token, config=config) ``` \"\"\" class Config : \"\"\"Configuration for acrclient.\"\"\" def __init__ ( self , retries : Union [ bool | int | None ] = 5 , backoff_factor : float = 0.1 , ) -> None : \"\"\" Parameters: retries: Total number of retries to allow. backoff_factor: A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). urllib3 will sleep for:: {backoff factor} * (2 ** ({number of total retries} - 1)) seconds. If the backoff_factor is 0.1, then :func:`Retry.sleep` will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer than `backoff_max`. By default, backoff is set to 0.1. \"\"\" self . _retries : Union [ bool | int | None ] = retries self . _backoff_factor : float = backoff_factor @property def retries ( self ) -> Union [ bool | int | None ]: return self . _retries @property def backoff_factor ( self ) -> float : return self . _backoff_factor def __init__ ( self , bearer_token : str , base_url : str = \"https://eu-api-v2.acrcloud.com\" , config : Optional [ Config ] = None , ) -> None : \"\"\" Parameters: bearer_token: The bearer token for ACRCloud. \"\"\" self . base_url : str = base_url self . _config : Optional [ Client . Config ] = config or Client . Config () self . _auth : _Auth = _Auth ( bearer_token = bearer_token ) self . _session = Session () self . _session . mount ( \"https://\" , HTTPAdapter ( max_retries = Retry ( total = self . _config . retries , backoff_factor = self . _config . backoff_factor , ) ), ) def get ( self , path : str , params : Any = None , ** kwargs : Any , ) -> Response : \"\"\"Fetch JSON data from ACRCloud API with set Access Key param. Parameters: path: URL path params: Parameters for request (usually used as GET params) **kwargs: Get passed to `requests.get` Returns: Response object \"\"\" url = f \" { self . base_url }{ path } \" if not kwargs . get ( \"timeout\" ): kwargs [ \"timeout\" ] = 60 # pylint: disable-next=missing-timeout response = self . _session . get ( url = url , auth = self . _auth , params = params , ** kwargs ) response . raise_for_status () return response def json ( self , path : str , params : Any = None , ** kwargs : Any , ) -> Any : \"\"\"Get the json results of a get call. Parameters: path: URL path params: Parameters for request (usually used as GET params) **kwargs: Get passed to `requests.get` Returns: Data from API \"\"\" response = self . get ( path , params = params , ** kwargs ) return response . json () def get_bm_cs_projects_results ( self , project_id : int , stream_id : str , params : Optional [ GetBmCsProjectsResultsParams ] = None , ** kwargs : Any , ) -> Any : \"\"\"Get Custom Broadcast Monitoring Streams Results from ACRCloud. Parameters: project_id: Custom Broadcast Monitoring Project ID stream_id: Custom Broadcast Monitoring Stream ID params: GET parameters for request **kwargs: Get passed to `requests.get` Returns: Data from API \"\"\" return self . json ( path = f \"/api/bm-cs-projects/ { project_id } /streams/ { stream_id } /results\" , params = params , ** kwargs , ) . get ( \"data\" ) Config Configuration for acrclient. Source code in acrclient/client.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Config : \"\"\"Configuration for acrclient.\"\"\" def __init__ ( self , retries : Union [ bool | int | None ] = 5 , backoff_factor : float = 0.1 , ) -> None : \"\"\" Parameters: retries: Total number of retries to allow. backoff_factor: A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). urllib3 will sleep for:: {backoff factor} * (2 ** ({number of total retries} - 1)) seconds. If the backoff_factor is 0.1, then :func:`Retry.sleep` will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer than `backoff_max`. By default, backoff is set to 0.1. \"\"\" self . _retries : Union [ bool | int | None ] = retries self . _backoff_factor : float = backoff_factor @property def retries ( self ) -> Union [ bool | int | None ]: return self . _retries @property def backoff_factor ( self ) -> float : return self . _backoff_factor __init__ ( retries = 5 , backoff_factor = 0.1 ) Parameters: Name Type Description Default retries Union [ bool | int | None] Total number of retries to allow. 5 backoff_factor float A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). urllib3 will sleep for:: {backoff factor} * (2 ** ({number of total retries} - 1)) seconds. If the backoff_factor is 0.1, then :func: Retry.sleep will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer than backoff_max . By default, backoff is set to 0.1. 0.1 Source code in acrclient/client.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def __init__ ( self , retries : Union [ bool | int | None ] = 5 , backoff_factor : float = 0.1 , ) -> None : \"\"\" Parameters: retries: Total number of retries to allow. backoff_factor: A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). urllib3 will sleep for:: {backoff factor} * (2 ** ({number of total retries} - 1)) seconds. If the backoff_factor is 0.1, then :func:`Retry.sleep` will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer than `backoff_max`. By default, backoff is set to 0.1. \"\"\" self . _retries : Union [ bool | int | None ] = retries self . _backoff_factor : float = backoff_factor __init__ ( bearer_token , base_url = 'https://eu-api-v2.acrcloud.com' , config = None ) Parameters: Name Type Description Default bearer_token str The bearer token for ACRCloud. required Source code in acrclient/client.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def __init__ ( self , bearer_token : str , base_url : str = \"https://eu-api-v2.acrcloud.com\" , config : Optional [ Config ] = None , ) -> None : \"\"\" Parameters: bearer_token: The bearer token for ACRCloud. \"\"\" self . base_url : str = base_url self . _config : Optional [ Client . Config ] = config or Client . Config () self . _auth : _Auth = _Auth ( bearer_token = bearer_token ) self . _session = Session () self . _session . mount ( \"https://\" , HTTPAdapter ( max_retries = Retry ( total = self . _config . retries , backoff_factor = self . _config . backoff_factor , ) ), ) get ( path , params = None , ** kwargs ) Fetch JSON data from ACRCloud API with set Access Key param. Parameters: Name Type Description Default path str URL path required params Any Parameters for request (usually used as GET params) None **kwargs Any Get passed to requests.get {} Returns: Type Description Response Response object Source code in acrclient/client.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def get ( self , path : str , params : Any = None , ** kwargs : Any , ) -> Response : \"\"\"Fetch JSON data from ACRCloud API with set Access Key param. Parameters: path: URL path params: Parameters for request (usually used as GET params) **kwargs: Get passed to `requests.get` Returns: Response object \"\"\" url = f \" { self . base_url }{ path } \" if not kwargs . get ( \"timeout\" ): kwargs [ \"timeout\" ] = 60 # pylint: disable-next=missing-timeout response = self . _session . get ( url = url , auth = self . _auth , params = params , ** kwargs ) response . raise_for_status () return response get_bm_cs_projects_results ( project_id , stream_id , params = None , ** kwargs ) Get Custom Broadcast Monitoring Streams Results from ACRCloud. Parameters: Name Type Description Default project_id int Custom Broadcast Monitoring Project ID required stream_id str Custom Broadcast Monitoring Stream ID required params Optional [ GetBmCsProjectsResultsParams ] GET parameters for request None **kwargs Any Get passed to requests.get {} Returns: Type Description Any Data from API Source code in acrclient/client.py 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def get_bm_cs_projects_results ( self , project_id : int , stream_id : str , params : Optional [ GetBmCsProjectsResultsParams ] = None , ** kwargs : Any , ) -> Any : \"\"\"Get Custom Broadcast Monitoring Streams Results from ACRCloud. Parameters: project_id: Custom Broadcast Monitoring Project ID stream_id: Custom Broadcast Monitoring Stream ID params: GET parameters for request **kwargs: Get passed to `requests.get` Returns: Data from API \"\"\" return self . json ( path = f \"/api/bm-cs-projects/ { project_id } /streams/ { stream_id } /results\" , params = params , ** kwargs , ) . get ( \"data\" ) json ( path , params = None , ** kwargs ) Get the json results of a get call. Parameters: Name Type Description Default path str URL path required params Any Parameters for request (usually used as GET params) None **kwargs Any Get passed to requests.get {} Returns: Type Description Any Data from API Source code in acrclient/client.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 def json ( self , path : str , params : Any = None , ** kwargs : Any , ) -> Any : \"\"\"Get the json results of a get call. Parameters: path: URL path params: Parameters for request (usually used as GET params) **kwargs: Get passed to `requests.get` Returns: Data from API \"\"\" response = self . get ( path , params = params , ** kwargs ) return response . json ()","title":"client"},{"location":"reference/acrclient/client/#acrclient.client.Client","text":"Client class with various methods to call ACRCloud API v2 endpoints. Examples: Create an instance with configuration. >>> bearer_token = \"bearer-token\" >>> config = Client . Config ( retries = 5 , backoff_factor = 0.1 ) >>> client = Client ( bearer_token , config = config ) Source code in acrclient/client.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 class Client : \"\"\"Client class with various methods to call ACRCloud API v2 endpoints. Examples: Create an instance with configuration. ```python >>> bearer_token = \"bearer-token\" >>> config = Client.Config(retries= 5, backoff_factor= 0.1) >>> client = Client(bearer_token, config=config) ``` \"\"\" class Config : \"\"\"Configuration for acrclient.\"\"\" def __init__ ( self , retries : Union [ bool | int | None ] = 5 , backoff_factor : float = 0.1 , ) -> None : \"\"\" Parameters: retries: Total number of retries to allow. backoff_factor: A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). urllib3 will sleep for:: {backoff factor} * (2 ** ({number of total retries} - 1)) seconds. If the backoff_factor is 0.1, then :func:`Retry.sleep` will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer than `backoff_max`. By default, backoff is set to 0.1. \"\"\" self . _retries : Union [ bool | int | None ] = retries self . _backoff_factor : float = backoff_factor @property def retries ( self ) -> Union [ bool | int | None ]: return self . _retries @property def backoff_factor ( self ) -> float : return self . _backoff_factor def __init__ ( self , bearer_token : str , base_url : str = \"https://eu-api-v2.acrcloud.com\" , config : Optional [ Config ] = None , ) -> None : \"\"\" Parameters: bearer_token: The bearer token for ACRCloud. \"\"\" self . base_url : str = base_url self . _config : Optional [ Client . Config ] = config or Client . Config () self . _auth : _Auth = _Auth ( bearer_token = bearer_token ) self . _session = Session () self . _session . mount ( \"https://\" , HTTPAdapter ( max_retries = Retry ( total = self . _config . retries , backoff_factor = self . _config . backoff_factor , ) ), ) def get ( self , path : str , params : Any = None , ** kwargs : Any , ) -> Response : \"\"\"Fetch JSON data from ACRCloud API with set Access Key param. Parameters: path: URL path params: Parameters for request (usually used as GET params) **kwargs: Get passed to `requests.get` Returns: Response object \"\"\" url = f \" { self . base_url }{ path } \" if not kwargs . get ( \"timeout\" ): kwargs [ \"timeout\" ] = 60 # pylint: disable-next=missing-timeout response = self . _session . get ( url = url , auth = self . _auth , params = params , ** kwargs ) response . raise_for_status () return response def json ( self , path : str , params : Any = None , ** kwargs : Any , ) -> Any : \"\"\"Get the json results of a get call. Parameters: path: URL path params: Parameters for request (usually used as GET params) **kwargs: Get passed to `requests.get` Returns: Data from API \"\"\" response = self . get ( path , params = params , ** kwargs ) return response . json () def get_bm_cs_projects_results ( self , project_id : int , stream_id : str , params : Optional [ GetBmCsProjectsResultsParams ] = None , ** kwargs : Any , ) -> Any : \"\"\"Get Custom Broadcast Monitoring Streams Results from ACRCloud. Parameters: project_id: Custom Broadcast Monitoring Project ID stream_id: Custom Broadcast Monitoring Stream ID params: GET parameters for request **kwargs: Get passed to `requests.get` Returns: Data from API \"\"\" return self . json ( path = f \"/api/bm-cs-projects/ { project_id } /streams/ { stream_id } /results\" , params = params , ** kwargs , ) . get ( \"data\" )","title":"Client"},{"location":"reference/acrclient/client/#acrclient.client.Client.Config","text":"Configuration for acrclient. Source code in acrclient/client.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Config : \"\"\"Configuration for acrclient.\"\"\" def __init__ ( self , retries : Union [ bool | int | None ] = 5 , backoff_factor : float = 0.1 , ) -> None : \"\"\" Parameters: retries: Total number of retries to allow. backoff_factor: A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). urllib3 will sleep for:: {backoff factor} * (2 ** ({number of total retries} - 1)) seconds. If the backoff_factor is 0.1, then :func:`Retry.sleep` will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer than `backoff_max`. By default, backoff is set to 0.1. \"\"\" self . _retries : Union [ bool | int | None ] = retries self . _backoff_factor : float = backoff_factor @property def retries ( self ) -> Union [ bool | int | None ]: return self . _retries @property def backoff_factor ( self ) -> float : return self . _backoff_factor","title":"Config"},{"location":"reference/acrclient/client/#acrclient.client.Client.Config.__init__","text":"Parameters: Name Type Description Default retries Union [ bool | int | None] Total number of retries to allow. 5 backoff_factor float A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). urllib3 will sleep for:: {backoff factor} * (2 ** ({number of total retries} - 1)) seconds. If the backoff_factor is 0.1, then :func: Retry.sleep will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer than backoff_max . By default, backoff is set to 0.1. 0.1 Source code in acrclient/client.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def __init__ ( self , retries : Union [ bool | int | None ] = 5 , backoff_factor : float = 0.1 , ) -> None : \"\"\" Parameters: retries: Total number of retries to allow. backoff_factor: A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). urllib3 will sleep for:: {backoff factor} * (2 ** ({number of total retries} - 1)) seconds. If the backoff_factor is 0.1, then :func:`Retry.sleep` will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer than `backoff_max`. By default, backoff is set to 0.1. \"\"\" self . _retries : Union [ bool | int | None ] = retries self . _backoff_factor : float = backoff_factor","title":"__init__()"},{"location":"reference/acrclient/client/#acrclient.client.Client.__init__","text":"Parameters: Name Type Description Default bearer_token str The bearer token for ACRCloud. required Source code in acrclient/client.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def __init__ ( self , bearer_token : str , base_url : str = \"https://eu-api-v2.acrcloud.com\" , config : Optional [ Config ] = None , ) -> None : \"\"\" Parameters: bearer_token: The bearer token for ACRCloud. \"\"\" self . base_url : str = base_url self . _config : Optional [ Client . Config ] = config or Client . Config () self . _auth : _Auth = _Auth ( bearer_token = bearer_token ) self . _session = Session () self . _session . mount ( \"https://\" , HTTPAdapter ( max_retries = Retry ( total = self . _config . retries , backoff_factor = self . _config . backoff_factor , ) ), )","title":"__init__()"},{"location":"reference/acrclient/client/#acrclient.client.Client.get","text":"Fetch JSON data from ACRCloud API with set Access Key param. Parameters: Name Type Description Default path str URL path required params Any Parameters for request (usually used as GET params) None **kwargs Any Get passed to requests.get {} Returns: Type Description Response Response object Source code in acrclient/client.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def get ( self , path : str , params : Any = None , ** kwargs : Any , ) -> Response : \"\"\"Fetch JSON data from ACRCloud API with set Access Key param. Parameters: path: URL path params: Parameters for request (usually used as GET params) **kwargs: Get passed to `requests.get` Returns: Response object \"\"\" url = f \" { self . base_url }{ path } \" if not kwargs . get ( \"timeout\" ): kwargs [ \"timeout\" ] = 60 # pylint: disable-next=missing-timeout response = self . _session . get ( url = url , auth = self . _auth , params = params , ** kwargs ) response . raise_for_status () return response","title":"get()"},{"location":"reference/acrclient/client/#acrclient.client.Client.get_bm_cs_projects_results","text":"Get Custom Broadcast Monitoring Streams Results from ACRCloud. Parameters: Name Type Description Default project_id int Custom Broadcast Monitoring Project ID required stream_id str Custom Broadcast Monitoring Stream ID required params Optional [ GetBmCsProjectsResultsParams ] GET parameters for request None **kwargs Any Get passed to requests.get {} Returns: Type Description Any Data from API Source code in acrclient/client.py 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def get_bm_cs_projects_results ( self , project_id : int , stream_id : str , params : Optional [ GetBmCsProjectsResultsParams ] = None , ** kwargs : Any , ) -> Any : \"\"\"Get Custom Broadcast Monitoring Streams Results from ACRCloud. Parameters: project_id: Custom Broadcast Monitoring Project ID stream_id: Custom Broadcast Monitoring Stream ID params: GET parameters for request **kwargs: Get passed to `requests.get` Returns: Data from API \"\"\" return self . json ( path = f \"/api/bm-cs-projects/ { project_id } /streams/ { stream_id } /results\" , params = params , ** kwargs , ) . get ( \"data\" )","title":"get_bm_cs_projects_results()"},{"location":"reference/acrclient/client/#acrclient.client.Client.json","text":"Get the json results of a get call. Parameters: Name Type Description Default path str URL path required params Any Parameters for request (usually used as GET params) None **kwargs Any Get passed to requests.get {} Returns: Type Description Any Data from API Source code in acrclient/client.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 def json ( self , path : str , params : Any = None , ** kwargs : Any , ) -> Any : \"\"\"Get the json results of a get call. Parameters: path: URL path params: Parameters for request (usually used as GET params) **kwargs: Get passed to `requests.get` Returns: Data from API \"\"\" response = self . get ( path , params = params , ** kwargs ) return response . json ()","title":"json()"},{"location":"reference/acrclient/models/","text":"GetBmCsProjectsResultsParams Bases: TypedDict Parameters for getting BM projects custom streams results. Source code in acrclient/models.py 4 5 6 7 8 9 10 11 12 13 14 15 16 class GetBmCsProjectsResultsParams ( TypedDict ): \"\"\"Parameters for getting BM projects custom streams results.\"\"\" type : str \"\"\"last: get the last results, day: get the day results, Default is day\"\"\" date : str \"\"\"Get all the results on this date. The format is YYYYmmdd (E.g. 20210201)\"\"\" min_duration : int \"\"\"Return the results of played_duration >= min_duration seconds (default: 0)\"\"\" max_duration : int \"\"\"Return the results with played_duration <= max_duration seconds (default: 3600)\"\"\" isrc_country : str \"\"\"Only return results that match the isrc country code (E.g. DE, FR, IT, US)\"\"\" date : str class-attribute Get all the results on this date. The format is YYYYmmdd (E.g. 20210201) isrc_country : str class-attribute Only return results that match the isrc country code (E.g. DE, FR, IT, US) max_duration : int class-attribute Return the results with played_duration <= max_duration seconds (default: 3600) min_duration : int class-attribute Return the results of played_duration >= min_duration seconds (default: 0) type : str class-attribute last: get the last results, day: get the day results, Default is day","title":"models"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams","text":"Bases: TypedDict Parameters for getting BM projects custom streams results. Source code in acrclient/models.py 4 5 6 7 8 9 10 11 12 13 14 15 16 class GetBmCsProjectsResultsParams ( TypedDict ): \"\"\"Parameters for getting BM projects custom streams results.\"\"\" type : str \"\"\"last: get the last results, day: get the day results, Default is day\"\"\" date : str \"\"\"Get all the results on this date. The format is YYYYmmdd (E.g. 20210201)\"\"\" min_duration : int \"\"\"Return the results of played_duration >= min_duration seconds (default: 0)\"\"\" max_duration : int \"\"\"Return the results with played_duration <= max_duration seconds (default: 3600)\"\"\" isrc_country : str \"\"\"Only return results that match the isrc country code (E.g. DE, FR, IT, US)\"\"\"","title":"GetBmCsProjectsResultsParams"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams.date","text":"Get all the results on this date. The format is YYYYmmdd (E.g. 20210201)","title":"date"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams.isrc_country","text":"Only return results that match the isrc country code (E.g. DE, FR, IT, US)","title":"isrc_country"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams.max_duration","text":"Return the results with played_duration <= max_duration seconds (default: 3600)","title":"max_duration"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams.min_duration","text":"Return the results of played_duration >= min_duration seconds (default: 0)","title":"min_duration"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams.type","text":"last: get the last results, day: get the day results, Default is day","title":"type"}]}