{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python ACR Client module","text":"<p>Contains a simple client for calling the v2 endpoints of the ACRCloud API.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>poetry add acrclient\n\n# or on old setup style projects\npip -m install acrclient\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>&gt;&gt;&gt; from acrclient import Client\n&gt;&gt;&gt; client = Client(bearer_token=\"bearer-token\")\n</code></pre>"},{"location":"#development","title":"Development","text":"<pre><code># setup a dev env\npython -mvenv env\n. env/bin/activate\n\n# install a modern poetry version\npython -mpip install poetry&gt;=1.2.0\n\n# install deps and dev version\npoetry install\n\n# make changes, run tests\npoetry run pytest\n</code></pre>"},{"location":"#release-management","title":"Release Management","text":"<p>The CI/CD setup uses semantic commit messages following the conventional commits standard. There is a GitHub Action in .github/workflows/semantic-release.yaml that uses go-semantic-commit to create new releases.</p> <p>The commit message should be structured as follows:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>The commit contains the following structural elements, to communicate intent to the consumers of your library:</p> <ol> <li>fix: a commit of the type <code>fix</code> patches gets released with a PATCH version bump</li> <li>feat: a commit of the type <code>feat</code> gets released as a MINOR version bump</li> <li>BREAKING CHANGE: a commit that has a footer <code>BREAKING CHANGE:</code> gets released as a MAJOR version bump</li> <li>types other than <code>fix:</code> and <code>feat:</code> are allowed and don't trigger a release</li> </ol> <p>If a commit does not contain a conventional commit style message you can fix it during the squash and merge operation on the PR.</p> <p>Once a commit has landed on the <code>main</code> branch a release will be created and automatically published to pypi using the GitHub Action in .github/workflows/release.yaml which uses poetry to publish the package to pypi.</p>"},{"location":"#license","title":"License","text":"<p>This package is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, version 3 of the License.</p>"},{"location":"#copyright","title":"Copyright","text":"<p>Copyright (c) 2023 Radio Bern RaBe</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>acrclient<ul> <li>client</li> <li>models</li> </ul> </li> </ul>"},{"location":"reference/acrclient/","title":"acrclient","text":"<p>Get started by importing the Client</p> <pre><code>&gt;&gt;&gt; from acrclient import Client\n</code></pre> <p>Create an instance and pass it a bearer token:</p> <pre><code>&gt;&gt;&gt; client = Client(\"bearer-token\")\n</code></pre> <p>See <code>Client</code> for available methods and options.</p>"},{"location":"reference/acrclient/client/","title":"client","text":""},{"location":"reference/acrclient/client/#acrclient.client.Client","title":"<code>Client</code>","text":"<p>Client class with various methods to call ACRCloud API v2 endpoints.</p> <p>Examples:</p> <p>Create an instance with configuration. <pre><code>&gt;&gt;&gt; bearer_token = \"bearer-token\"\n&gt;&gt;&gt; config = Client.Config(retries= 5, backoff_factor= 0.1)\n&gt;&gt;&gt; client = Client(bearer_token, config=config)\n</code></pre></p> Source code in <code>acrclient/client.py</code> <pre><code>class Client:\n\"\"\"Client class with various methods to call ACRCloud API v2 endpoints.\n    Examples:\n        Create an instance with configuration.\n        ```python\n        &gt;&gt;&gt; bearer_token = \"bearer-token\"\n        &gt;&gt;&gt; config = Client.Config(retries= 5, backoff_factor= 0.1)\n        &gt;&gt;&gt; client = Client(bearer_token, config=config)\n        ```\n    \"\"\"\nclass Config:\n\"\"\"Configuration for acrclient.\"\"\"\ndef __init__(\nself,\nretries: Union[bool | int | None] = 5,\nbackoff_factor: float = 0.1,\n) -&gt; None:\n\"\"\"\n            Parameters:\n                retries: Total number of retries to allow.\n                backoff_factor: A backoff factor to apply between attempts after the\n                    second try (most errors are resolved immediately by a second try\n                    without a delay). urllib3 will sleep for::\n                        {backoff factor} * (2 ** ({number of total retries} - 1))\n                    seconds. If the backoff_factor is 0.1, then :func:`Retry.sleep`\n                    will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will\n                    never be longer than `backoff_max`.\n                    By default, backoff is set to 0.1.\n            \"\"\"\nself._retries: Union[bool | int | None] = retries\nself._backoff_factor: float = backoff_factor\n@property\ndef retries(self) -&gt; Union[bool | int | None]:\nreturn self._retries\n@property\ndef backoff_factor(self) -&gt; float:\nreturn self._backoff_factor\ndef __init__(\nself,\nbearer_token: str,\nbase_url: str = \"https://eu-api-v2.acrcloud.com\",\nconfig: Optional[Config] = None,\n) -&gt; None:\n\"\"\"\n        Parameters:\n            bearer_token: The bearer token for ACRCloud.\n        \"\"\"\nself.base_url: str = base_url\nself._config: Optional[Client.Config] = config or Client.Config()\nself._auth: _Auth = _Auth(bearer_token=bearer_token)\nself._session = Session()\nself._session.mount(\n\"https://\",\nHTTPAdapter(\nmax_retries=Retry(\ntotal=self._config.retries,\nbackoff_factor=self._config.backoff_factor,\n)\n),\n)\ndef get(\nself,\npath: str,\nparams: Any = None,\n**kwargs: Any,\n) -&gt; Response:\n\"\"\"Fetch JSON data from ACRCloud API with set Access Key param.\n        Parameters:\n            path: URL path\n            params: Parameters for request (usually used as GET params)\n            **kwargs: Get passed to `requests.get`\n        Returns:\n            Response object\n        \"\"\"\nurl = f\"{self.base_url}{path}\"\nif not kwargs.get(\"timeout\"):\nkwargs[\"timeout\"] = 60\n# pylint: disable-next=missing-timeout\nresponse = self._session.get(url=url, auth=self._auth, params=params, **kwargs)\nresponse.raise_for_status()\nreturn response\ndef json(\nself,\npath: str,\nparams: Any = None,\n**kwargs: Any,\n) -&gt; Any:\n\"\"\"Get the json results of a get call.\n        Parameters:\n            path: URL path\n            params: Parameters for request (usually used as GET params)\n            **kwargs: Get passed to `requests.get`\n        Returns:\n            Data from API\n        \"\"\"\nresponse = self.get(path, params=params, **kwargs)\nreturn response.json()\ndef get_bm_cs_projects_results(\nself,\nproject_id: int,\nstream_id: str,\nparams: Optional[GetBmCsProjectsResultsParams] = None,\n**kwargs: Any,\n) -&gt; Any:\n\"\"\"Get Custom Broadcast Monitoring Streams Results from ACRCloud.\n        Parameters:\n            project_id: Custom Broadcast Monitoring Project ID\n            stream_id: Custom Broadcast Monitoring Stream ID\n            params: GET parameters for request\n            **kwargs: Get passed to `requests.get`\n        Returns:\n            Data from API\n        \"\"\"\nreturn self.json(\npath=f\"/api/bm-cs-projects/{project_id}/streams/{stream_id}/results\",\nparams=params,\n**kwargs,\n).get(\"data\")\n</code></pre>"},{"location":"reference/acrclient/client/#acrclient.client.Client.Config","title":"<code>Config</code>","text":"<p>Configuration for acrclient.</p> Source code in <code>acrclient/client.py</code> <pre><code>class Config:\n\"\"\"Configuration for acrclient.\"\"\"\ndef __init__(\nself,\nretries: Union[bool | int | None] = 5,\nbackoff_factor: float = 0.1,\n) -&gt; None:\n\"\"\"\n        Parameters:\n            retries: Total number of retries to allow.\n            backoff_factor: A backoff factor to apply between attempts after the\n                second try (most errors are resolved immediately by a second try\n                without a delay). urllib3 will sleep for::\n                    {backoff factor} * (2 ** ({number of total retries} - 1))\n                seconds. If the backoff_factor is 0.1, then :func:`Retry.sleep`\n                will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will\n                never be longer than `backoff_max`.\n                By default, backoff is set to 0.1.\n        \"\"\"\nself._retries: Union[bool | int | None] = retries\nself._backoff_factor: float = backoff_factor\n@property\ndef retries(self) -&gt; Union[bool | int | None]:\nreturn self._retries\n@property\ndef backoff_factor(self) -&gt; float:\nreturn self._backoff_factor\n</code></pre>"},{"location":"reference/acrclient/client/#acrclient.client.Client.Config.__init__","title":"<code>__init__(retries=5, backoff_factor=0.1)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>retries</code> <code>Union[bool | int | None]</code> <p>Total number of retries to allow.</p> <code>5</code> <code>backoff_factor</code> <code>float</code> <p>A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). urllib3 will sleep for::     {backoff factor} * (2 ** ({number of total retries} - 1)) seconds. If the backoff_factor is 0.1, then :func:<code>Retry.sleep</code> will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer than <code>backoff_max</code>. By default, backoff is set to 0.1.</p> <code>0.1</code> Source code in <code>acrclient/client.py</code> <pre><code>def __init__(\nself,\nretries: Union[bool | int | None] = 5,\nbackoff_factor: float = 0.1,\n) -&gt; None:\n\"\"\"\n    Parameters:\n        retries: Total number of retries to allow.\n        backoff_factor: A backoff factor to apply between attempts after the\n            second try (most errors are resolved immediately by a second try\n            without a delay). urllib3 will sleep for::\n                {backoff factor} * (2 ** ({number of total retries} - 1))\n            seconds. If the backoff_factor is 0.1, then :func:`Retry.sleep`\n            will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. It will\n            never be longer than `backoff_max`.\n            By default, backoff is set to 0.1.\n    \"\"\"\nself._retries: Union[bool | int | None] = retries\nself._backoff_factor: float = backoff_factor\n</code></pre>"},{"location":"reference/acrclient/client/#acrclient.client.Client.__init__","title":"<code>__init__(bearer_token, base_url='https://eu-api-v2.acrcloud.com', config=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>str</code> <p>The bearer token for ACRCloud.</p> required Source code in <code>acrclient/client.py</code> <pre><code>def __init__(\nself,\nbearer_token: str,\nbase_url: str = \"https://eu-api-v2.acrcloud.com\",\nconfig: Optional[Config] = None,\n) -&gt; None:\n\"\"\"\n    Parameters:\n        bearer_token: The bearer token for ACRCloud.\n    \"\"\"\nself.base_url: str = base_url\nself._config: Optional[Client.Config] = config or Client.Config()\nself._auth: _Auth = _Auth(bearer_token=bearer_token)\nself._session = Session()\nself._session.mount(\n\"https://\",\nHTTPAdapter(\nmax_retries=Retry(\ntotal=self._config.retries,\nbackoff_factor=self._config.backoff_factor,\n)\n),\n)\n</code></pre>"},{"location":"reference/acrclient/client/#acrclient.client.Client.get","title":"<code>get(path, params=None, **kwargs)</code>","text":"<p>Fetch JSON data from ACRCloud API with set Access Key param.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path</p> required <code>params</code> <code>Any</code> <p>Parameters for request (usually used as GET params)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Get passed to <code>requests.get</code></p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object</p> Source code in <code>acrclient/client.py</code> <pre><code>def get(\nself,\npath: str,\nparams: Any = None,\n**kwargs: Any,\n) -&gt; Response:\n\"\"\"Fetch JSON data from ACRCloud API with set Access Key param.\n    Parameters:\n        path: URL path\n        params: Parameters for request (usually used as GET params)\n        **kwargs: Get passed to `requests.get`\n    Returns:\n        Response object\n    \"\"\"\nurl = f\"{self.base_url}{path}\"\nif not kwargs.get(\"timeout\"):\nkwargs[\"timeout\"] = 60\n# pylint: disable-next=missing-timeout\nresponse = self._session.get(url=url, auth=self._auth, params=params, **kwargs)\nresponse.raise_for_status()\nreturn response\n</code></pre>"},{"location":"reference/acrclient/client/#acrclient.client.Client.get_bm_cs_projects_results","title":"<code>get_bm_cs_projects_results(project_id, stream_id, params=None, **kwargs)</code>","text":"<p>Get Custom Broadcast Monitoring Streams Results from ACRCloud.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>int</code> <p>Custom Broadcast Monitoring Project ID</p> required <code>stream_id</code> <code>str</code> <p>Custom Broadcast Monitoring Stream ID</p> required <code>params</code> <code>Optional[GetBmCsProjectsResultsParams]</code> <p>GET parameters for request</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Get passed to <code>requests.get</code></p> <code>{}</code> <p>Returns:</p> Type Description <code>Any</code> <p>Data from API</p> Source code in <code>acrclient/client.py</code> <pre><code>def get_bm_cs_projects_results(\nself,\nproject_id: int,\nstream_id: str,\nparams: Optional[GetBmCsProjectsResultsParams] = None,\n**kwargs: Any,\n) -&gt; Any:\n\"\"\"Get Custom Broadcast Monitoring Streams Results from ACRCloud.\n    Parameters:\n        project_id: Custom Broadcast Monitoring Project ID\n        stream_id: Custom Broadcast Monitoring Stream ID\n        params: GET parameters for request\n        **kwargs: Get passed to `requests.get`\n    Returns:\n        Data from API\n    \"\"\"\nreturn self.json(\npath=f\"/api/bm-cs-projects/{project_id}/streams/{stream_id}/results\",\nparams=params,\n**kwargs,\n).get(\"data\")\n</code></pre>"},{"location":"reference/acrclient/client/#acrclient.client.Client.json","title":"<code>json(path, params=None, **kwargs)</code>","text":"<p>Get the json results of a get call.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>URL path</p> required <code>params</code> <code>Any</code> <p>Parameters for request (usually used as GET params)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Get passed to <code>requests.get</code></p> <code>{}</code> <p>Returns:</p> Type Description <code>Any</code> <p>Data from API</p> Source code in <code>acrclient/client.py</code> <pre><code>def json(\nself,\npath: str,\nparams: Any = None,\n**kwargs: Any,\n) -&gt; Any:\n\"\"\"Get the json results of a get call.\n    Parameters:\n        path: URL path\n        params: Parameters for request (usually used as GET params)\n        **kwargs: Get passed to `requests.get`\n    Returns:\n        Data from API\n    \"\"\"\nresponse = self.get(path, params=params, **kwargs)\nreturn response.json()\n</code></pre>"},{"location":"reference/acrclient/models/","title":"models","text":""},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams","title":"<code>GetBmCsProjectsResultsParams</code>","text":"<p>         Bases: <code>TypedDict</code></p> <p>Parameters for getting BM projects custom streams results.</p> Source code in <code>acrclient/models.py</code> <pre><code>class GetBmCsProjectsResultsParams(TypedDict):\n\"\"\"Parameters for getting BM projects custom streams results.\"\"\"\ntype: str\n\"\"\"last: get the last results, day: get the day results, Default is day\"\"\"\ndate: str\n\"\"\"Get all the results on this date. The format is YYYYmmdd (E.g. 20210201)\"\"\"\nmin_duration: int\n\"\"\"Return the results of played_duration &gt;= min_duration seconds (default: 0)\"\"\"\nmax_duration: int\n\"\"\"Return the results with played_duration &lt;= max_duration seconds (default: 3600)\"\"\"\nisrc_country: str\n\"\"\"Only return results that match the isrc country code (E.g. DE, FR, IT, US)\"\"\"\n</code></pre>"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams.date","title":"<code>date: str</code>  <code>instance-attribute</code>","text":"<p>Get all the results on this date. The format is YYYYmmdd (E.g. 20210201)</p>"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams.isrc_country","title":"<code>isrc_country: str</code>  <code>instance-attribute</code>","text":"<p>Only return results that match the isrc country code (E.g. DE, FR, IT, US)</p>"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams.max_duration","title":"<code>max_duration: int</code>  <code>instance-attribute</code>","text":"<p>Return the results with played_duration &lt;= max_duration seconds (default: 3600)</p>"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams.min_duration","title":"<code>min_duration: int</code>  <code>instance-attribute</code>","text":"<p>Return the results of played_duration &gt;= min_duration seconds (default: 0)</p>"},{"location":"reference/acrclient/models/#acrclient.models.GetBmCsProjectsResultsParams.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":"<p>last: get the last results, day: get the day results, Default is day</p>"}]}